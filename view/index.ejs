<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.0.4/socket.io.js"></script>

  <title>Document</title>
</head>
<body>
  <ul id="ulOnlineUsers">

  </ul>

  <ul id="mensagens">

  </ul>
  <form action="" id="formNick">
    <input data-testid="nickname-box" id="nickInput"><button data-testid="nickname-button">Salvar Nick</button>
  </form>
  <form action="" id="formMessage">
    <input id="mensagemInput" autocomplete="off" data-testid="message-box" /><button data-testid="send-button">Send</button>
  </form>
  <script>
    const socket = io();
    const formMessage = document.querySelector('#formMessage');
    const inputMessage = document.querySelector('#mensagemInput');
    let randomNick = Math.random().toString(16).substr(2, 8) + Math.random().toString(16).substr(2, 8);
    
    formMessage.addEventListener('submit', (event) => {
      event.preventDefault();
      socket.emit('message', { chatMessage: inputMessage.value, nickname: randomNick });
      inputMessage.value = '';
      return false;
    });

    const formNick = document.querySelector('#formNick');
    const inputNick = document.querySelector('#nickInput');
    formNick.addEventListener('submit', (event) => {
      event.preventDefault();
      randomNick = inputNick.value;
      socket.emit('nickEdtion', randomNick);
      return false;
    });

    const createMessage = (message) => {
      const messageUl = document.querySelector('#mensagens');
      const li = document.createElement('li');
      li.setAttribute('data-testid','message');
      li.innerText = message;
      messageUl.appendChild(li);
    };
  
    const createOnlineUsers = (users) => {
      const order = users.filter((users) => users !== randomNick);
      console.log(order)
      order.unshift(randomNick);
      // coloca o item como primeiro do array
      const ulOnlineUsers = document.querySelector('#ulOnlineUsers');
      while( ulOnlineUsers.firstChild ) ulOnlineUsers.removeChild( ulOnlineUsers.firstChild );

      order.forEach((user) => {
        const li = document.createElement('li');
        li.setAttribute('data-testid','online-user');
        li.innerText = user;
        ulOnlineUsers.appendChild(li);
      });
    };

    // socket.on('Reload', () => {
    //   window.location.reload(true);
    //   window.location.reload(false);
    // });

    
    socket.on('message', (message) => createMessage(message));
    socket.on('onlineUsers', (users) => {
      const order = users.filter((users) => users !== randomNick);
      order.unshift(randomNick);
      createOnlineUsers(order);
    }); 
    window.onload = () => socket.emit('logedNick', randomNick);
  </script>

</body>
</html>