<!DOCTYPE html>
<html>
  <head>
    <title>Webchat </title>
  </head>
  <body>
    <div class="main-div">
      <div class="user-div">
          <input id="nickname-input" autocomplete="off" placeholder="Insira seu nickname" data-testid="nickname-box" />
          <button data-testid="nickname-button" id="nickname-btn">Salvar</button>

        <ul id="users-list" class="users-list"></ul>
      </div>
      <ul id="messages-list" class="messages-list" data-testid="messages-list"></ul>
    </div>

      <input id="message-input" data-testid="message-box" autocomplete="off" placeholder="Digite uma nova mensagem aqui"/><button data-testid="send-button" id="send">Send</button>

    <script src="/socket.io/socket.io.js"></script>

    <script>
      const socket = io();
     let geraNick = `Fla${Date.now()}`
     let nickname = ""


      const inputMessage = document.querySelector('#message-input')
      const btnSend = document.querySelector('#send')
      const inputname = document.querySelector('#nickname-input')
      const btnSalveName = document.querySelector('#nickname-btn')


      btnSalveName.addEventListener('click',(e)=>{
        e.preventDefault();
        nickname = inputname.value
        socket.emit('newNickname',nickname)
        // const t =  document.querySelector('#online-user')
        // t.innerHTML = nickname
        // console.log(nickname)
        // socket.emit('nickMailOnLine', t)
        // addNickName(t)
      })




      const sendMessage = () =>{
         const chatMessage = inputMessage.value
         const nickname =  document.querySelector('#online-user').innerText
         socket.emit('message',{
          chatMessage,
          nickname
         })
      }

      btnSend.addEventListener("click",(e) => {
        e.preventDefault();
        sendMessage()
      })

      const addMessage = (message) => {
        const messagesUl = document.querySelector('#messages-list');
        const li = document.createElement('li');
        li.innerText = message;
        li.dataset.testid = 'message';
        messagesUl.appendChild(li);
      };

      const addNickName = (nickname) => {
        const nicknameUl = document.querySelector('#users-list');
        nicknameUl.innerHTML = ""
        nickname.map((user) => {
          const li = document.createElement('li');
          li.innerText = user.nickname
          li.dataset.testid = 'online-user';
          li.id='online-user'
          socket.id === user.id
          ? nicknameUl.prepend(li)
          : nicknameUl.appendChild(li);
        })
      }


       const addMessageHistory = (messages)=>{
        const messagesUl = document.querySelector('#messages-list');
        messages.forEach(({chatMessage, nickname, timestamp }) => {
          const li = document.createElement('li');
          li.innerText = `${timestamp} - ${nickname}: ${chatMessage}`;
          li.dataset.testid = 'message';
          messagesUl.appendChild(li);
        })
       }


      socket.emit('geraNick',geraNick)
      socket.on('message', (message) => addMessage(message));
      //socket.on('nickName', (nickName) => addNickName(nickName));
      socket.on('historyMessage', (messages) => addMessageHistory(messages));
      socket.on('rendernickname', (listUserOnLine) => addNickName(listUserOnLine));

    </script>
  </body>
</html>