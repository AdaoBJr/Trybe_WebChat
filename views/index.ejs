<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.0.4/socket.io.js"></script>
  <body>
    <h1>Webchat</h1>
    <form>
      <div id="usersList">
        <ul id="users"></ul>
      </div>
      <input
        type="text"
        id="nicknameInput"
        data-testid="nickname-box"
        placeholder="nickname"
      />
      <button type="button" id="nicknameButton" data-testid="nickname-button">
        Salvar
      </button>
      <input
        type="text"
        id="messageInput"
        data-testid="message-box"
        placeholder="Digite sua mensagem"
      />
      <button type="button" id="sendButton" data-testid="send-button">
        Enviar
      </button>
    </form>
    <ul id="ulMessages"></ul>
    <script>
      const socket = io();

      socket.emit("messagesHistory");

      const nicknameButton = document.querySelector("#nicknameButton");
      const sendButton = document.querySelector("#sendButton");
      const messageInput = document.querySelector("#messageInput");
      const nicknameInput = document.querySelector("#nicknameInput");
      const userNameTag = document.querySelector("#onlineUser");
      const nickname =
        Math.random().toString(16).substr(2, 8) +
        Math.random().toString(16).substr(2, 8);

      sessionStorage.setItem("nickname", nickname);

      nicknameButton.addEventListener("click", () => {
        const nicknameInput = document.querySelector("#nicknameInput");
        const newNick = nicknameInput.value;
        const oldNick = sessionStorage.getItem("nickname");
        socket.emit("updateNickname", newNick, oldNick);
        sessionStorage.setItem("nickname", nicknameInput.value);
        nicknameInput.value = "";
      });

      sendButton.addEventListener("click", () => {
        socket.emit("message", {
          chatMessage: messageInput.value,
          nickname: sessionStorage.getItem("nickname"),
        });
        messageInput.value = "";
        return false;
      });

      const createMessage = (message) => {
        const ul = document.querySelector("#ulMessages");
        const li = document.createElement("li");
        li.innerText = message;
        li.setAttribute("data-testid", "message");
        ul.appendChild(li);
      };

      const createOnlineUsers = (users) => {
        const ul = document.querySelector("#users");
        ul.innerHTML = "";
        const li = document.createElement("li");
        li.setAttribute("data-testid", "online-user");
        li.innerText = sessionStorage.getItem("nickname");
        ul.appendChild(li);
        users.forEach((user) => {
          if (socket.id !== user.id) {
            const li = document.createElement("li");
            li.setAttribute("data-testid", "online-user");
            li.innerText = user.nickname;
            ul.appendChild(li);
          }
        });
      };

      const messagesHistory = (messages) => {
        const ulMessages = document.querySelector("#ulMessages");
        messages.forEach(({ message, nickname, timestamp }) => {
          const formatMessage = `${timestamp} - ${nickname}: ${message}`;
          const li = document.createElement("li");
          li.setAttribute("data-testid", "message");
          li.innerText = formatMessage;
          ulMessages.appendChild(li);
        });
      };

      socket.emit("nickname", nickname);

      socket.on("onlineUsers", (users) => createOnlineUsers(users));
      socket.on("userDisconnected", (users) => createOnlineUsers(users));
      socket.on("newNick", (users) => createOnlineUsers(users));
      socket.on("message", (msg) => createMessage(msg));
      socket.on("messagesHistory", (messages) => messagesHistory(messages));
    </script>
  </body>
</html>
