<!DOCTYPE html>
<html>
  <head>
    <link href="./css/index.css" rel="stylesheet">
    <title>WebChat</title>
    <!-- Baseado em http://socket.io/get-started/chat -->
    <style>
      body { margin: 0; padding-bottom: 3rem; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; }

      #message-form { background: rgba(0, 0, 0, 0.15); padding: 0.25rem; position: fixed; bottom: 0; left: 0; right: 0; display: flex; height: 3rem; box-sizing: border-box; backdrop-filter: blur(10px); }
      #message-input { border: none; padding: 0 1rem; flex-grow: 1; border-radius: 2rem; margin: 0.25rem; }
      #message-input:focus { outline: none; }
      #message-form > button { background: #333; border: none; padding: 0 1rem; margin: 0.25rem; border-radius: 3px; outline: none; color: #fff; }

      #messages { list-style-type: none; margin: 0; padding: 0; }
      #messages > li { padding: 0.5rem 1rem; }
      #messages > li:nth-child(odd) { background: #efefef; }
    </style>
  </head>
  <body>
    <div class="content">
      <div class="users">
        <form id="users-form" action="">
          <input id="user-input" data-testid="nickname-box" autocomplete="off" />
          <button data-testid="nickname-button">Salvar</button>
        </form>
        <ul id=users></ul>
      </div>
      <div class="messages">
        <ul id="messages"></ul>
      </div>
    </div>
    <form id="message-form" action="">
      <input id="message-input" data-testid="message-box" autocomplete="off" />
      <button data-testid="send-button">Send</button>
    </form>
    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io();

      function makeId(length) {
        var result           = '';
        var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        var charactersLength = characters.length;
        for ( var i = 0; i < length; i++ ) {
          result += characters.charAt(Math.floor(Math.random() * charactersLength));
        }
        return result;
      }

      let nickname = makeId(16);
      let originalNickname = nickname;

      const users = document.getElementById('users');
      const userForm = document.getElementById('users-form');
      const userInput = document.getElementById('user-input');

      // Cria o usuÃ¡rio atual na lista
      const user = document.createElement('li');
      user.textContent = nickname;
      user.dataset.testid='online-user';
      users.appendChild(user);
      socket.emit('changeNickname', {originalNickname: nickname, nickname});

      userForm.addEventListener('submit', (e) => {
        e.preventDefault();
        if(userInput.value) {
          originalNickname = nickname;
          nickname = userInput.value;
          const item = document.createElement('li');
          item.textContent = userInput.value;
          user.removeChild(user.firstChild);
          user.insertBefore(item, user.firstChild);
          socket.emit('changeNickname', {originalNickname, nickname});
          userInput.value = '';
        }
      })
      
      const messages = document.getElementById('messages');
      const messageForm = document.getElementById('message-form');
      const messageInput = document.getElementById('message-input');
      

      messageForm.addEventListener('submit', (e) => {
        e.preventDefault();
        if (messageInput.value) {
          socket.emit('message', {chatMessage: messageInput.value, nickname});
          messageInput.value = '';
        }
      });
    
      socket.on('message', (msg) => {
        const item = document.createElement('li');
        item.textContent = msg;
        item.dataset.testid='message';
        messages.appendChild(item);
        window.scrollTo(0, document.body.scrollHeight);
      });

      socket.on('messageHistory', (messageHistory) => {
        messageHistory.forEach((element) => {
          const item = document.createElement('li');
          item.textContent = element;
          item.dataset.testid = 'message';
          messages.appendChild(item);
          window.scrollTo(0, document.body.scrollHeight);
        });
      })

      socket.on('userHistory', (userHistory) => {
        userHistory.forEach((element) => {
          const item = document.createElement('li');
          item.textContent = element;
          item.dataset.testid = 'online-user';
          users.appendChild(item);
        })
      })

      socket.on('changeNickname', (usernames) => {
        while (users.firstChild) {
          users.removeChild(users.firstChild);
        }
        const currentUser = document.createElement('li');
        currentUser.textContent = nickname;
        currentUser.dataset.testid='online-user';
        users.appendChild(currentUser);
        usernames.forEach((element) => {
          const item = document.createElement('li');
          item.textContent = element;
          item.dataset.testid = 'online-user';
          if (element !== nickname) users.appendChild(item);
        });
      })
    </script>
  </body>
</html>