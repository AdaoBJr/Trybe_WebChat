<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <h1>Chat</h1>
    <ul id="usersContainer"></ul>
    <ul id="messages"></ul>
    <form id="nickNameForm">
      <input
        id="nickNameInput"
        autocomplete="off"
        placeholder="Nick name"
        data-testid="nickname-box"
      />
      <button data-testid="nickname-button">Save</button>
    </form>
    <form id="messageForm">
      <input id="messageInput" autocomplete="off" data-testid="message-box" />
      <button data-testid="send-button">Send</button>
    </form>
  </body>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();

    const messageForm = document.querySelector("#messageForm");
    const messageInput = document.querySelector("#messageInput");

    messageForm.addEventListener("submit", (e) => {
      e.preventDefault();
      socket.emit("message", {
        chatMessage: messageInput.value,
        nickname: nickName,
      });
      messageInput.value = "";
      return false;
    });

    const createMessage = (message) => {
      const messagesUl = document.querySelector("#messages");
      const li = document.createElement("li");
      li.innerText = message;
      li.setAttribute("data-testid", "message");
      messagesUl.appendChild(li);
    };

    let nickName;

    const nickNameForm = document.querySelector("#nickNameForm");
    const nickNameInput = document.querySelector("#nickNameInput");

    nickNameForm.addEventListener("submit", (e) => {
      e.preventDefault();
      nickName = nickNameInput.value;
      nickNameInput.value = "";
      return false;
    });

    const addUser = (nickName) => {
      const usersContainer = document.querySelector("#usersContainer");
      const li = document.createElement("li");
      li.innerText = nickName;
      li.setAttribute("data-testid", "online-user");
      usersContainer.appendChild(li);
    };

    socket.on("message", (message) => createMessage(message));
    socket.on("setUser", (randomUser) => {
      nickName = randomUser;
      addUser(randomUser);
    });

    window.onbeforeunload = () => {
      socket.disconnect();
    };
  </script>
</html>
